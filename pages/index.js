import Head from 'next/head'
import { useState } from "react";
import { AiOutlineCopy } from 'react-icons/ai'
import { IconContext } from 'react-icons';

export default function Home() {

  const [rangeval, setRangeval] = useState(10);
  const [pass, setPass] = useState("");
  const [checkedState, setCheckedState] = useState(new Array(4).fill(false));
  const [strength, setStrength] = useState("NONE");

  const handleOnCheck = (pos) => {
    const check = checkedState.map((item, index) =>
      index === pos ? !item : item
    );

    setCheckedState(check);
  }

  const strengthCheck = () => {
    let strg = checkedState.filter(x => x === true).length * rangeval;
    if(strg < 30) setStrength("EASY");
    else if(strg > 29 && strg < 60) setStrength("MEDIUM");
    else setStrength("HARD");
  }

  const getRandomLowerCase = () => String.fromCharCode(Math.floor(Math.random()*26)+97);
  const getRandomUpperCase = () => String.fromCharCode(Math.floor(Math.random()*26)+65);
  const getRandomNumber = () => String.fromCharCode(Math.floor(Math.random()*10)+48);
  const getRandomSymbol = () => {
    let symbolStr = `!@#$%^&*(){}[]/`;
    return symbolStr[Math.floor(Math.random()*symbolStr.length)];
  }

  const genPass = () => {
    if(checkedState.filter(x => x === false).length == 4) return alert ("You need to check at least one box!");
    let aux = "";
    while (aux.length < rangeval) {
        let index = Math.floor(Math.random()*4);
        if(checkedState[index] === true) {
          switch (index) {
            case 0:
              let ax = getRandomUpperCase();
              aux = aux + ax;
              break;

            case 1:
              let bx = getRandomLowerCase();
              aux = aux + bx;
              break;

            case 2:
              let cx = getRandomNumber();
              aux = aux + cx;
              break;

            case 3:
              let dx = getRandomSymbol();
              aux = aux + dx;
              break;
          
            default:
              break;
          }
        }
    }
    setPass(aux);
    strengthCheck();
  }

  return (
    <div className='text-white'>
      <Head>
        <title>Password generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='flex flex-col items-center justify-center gap-4'>
        <h1 className='text-[#797782] font-bold text-xl'>Password Generator</h1>
        <div className='bg-[#24232B] flex justify-between gap-40 p-4 min-w-[370px]'>
          <h1 className='text-xl font-bold'>{pass ? pass : "Click GENERATE!"}</h1>
          <IconContext.Provider value={{size: 20}}><button className='text-[#A4FFAF] hover:text-white' onClick={() => navigator.clipboard.writeText(pass)}><AiOutlineCopy /></button></IconContext.Provider>
        </div>
        <div className='bg-[#24232B] p-4 min-w-[370px] flex flex-col gap-4'>
          <div className='flex justify-between items-center gap-40'>
            <h1 className='text-xl font-semibold text-[#A5A3AC]'>Charachter Length</h1>
            <h1 className='text-3xl font-bold'>{rangeval}</h1>
          </div>
          <input className='w-full mb-2 slider' style={{background: `linear-gradient(90deg, rgb(164,255,175) ${rangeval*5}%, rgb(20,20,20) ${rangeval*5}%)`}} type={'range'} min={1} max={20} defaultValue={10} onChange={(e) => {setRangeval(e.target.value)}} />
          <div className='flex items-center gap-2'><input className='text-[#A4FFAF]' type={'checkbox'} id='upper' checked={checkedState[0]} onChange={() => handleOnCheck(0)} /><label htmlFor='upper'>Include Uppercase Letters</label></div>
          <div className='flex items-center gap-2'><input className='text-[#A4FFAF]' type={'checkbox'} id='lower' checked={checkedState[1]} onChange={() => handleOnCheck(1)} /><label htmlFor='lower'>Include Lowercase Letters</label></div>
          <div className='flex items-center gap-2'><input className='text-[#A4FFAF]' type={'checkbox'} id='numbers' checked={checkedState[2]} onChange={() => handleOnCheck(2)} /><label htmlFor='numbers'>Include Numbers</label></div>
          <div className='flex items-center gap-2'><input className='text-[#A4FFAF]' type={'checkbox'} id='symbols' checked={checkedState[3]} onChange={() => handleOnCheck(3)} /><label htmlFor='symbols'>Include Symbols</label></div>
          <div className='w-full bg-[#18171F] py-4 flex justify-between mt-2 px-6'>
            <h1 className='text-[#55535C]'>STRENGTH</h1>
            <div className='flex items-center gap-2'>
              <h1 className='font-semibold'>{strength}</h1>
              <div className={`border-[1px] w-2 h-6 ${strength === "EASY" ? "bg-red-600" : strength === "MEDIUM" ? "bg-yellow-400" : strength === "HARD" ? "bg-green-500" : ""}`}></div>
              <div className={`border-[1px] w-2 h-6 ${strength === "MEDIUM" ? "bg-yellow-400" : strength === "HARD" ? "bg-green-500" : ""}`}></div>
              <div className={`border-[1px] w-2 h-6 ${strength === "HARD" ? "bg-green-500" : ""}`}></div>
            </div>
          </div>
          <button onClick={() => genPass()} className='w-full bg-[#A4FFAF] text-black font-bold py-4 rounded-sm my-2 border-2 border-[#A4FFAF] hover:bg-[#24232B] hover:text-[#A4FFAF]'>GENERATE</button>
        </div>
      </div>
    </div>
  )
}
